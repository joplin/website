"use strict";(self.webpackChunk_joplin_doc_builder=self.webpackChunk_joplin_doc_builder||[]).push([[4092],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7131:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_label:"Joplin Server items"},o="Joplin Server items",s={unversionedId:"dev/spec/server_items",id:"dev/spec/server_items",title:"Joplin Server items",description:"Donate using PayPal Sponsor on GitHub Become a patron Donate using IBAN",source:"@site/help/dev/spec/server_items.md",sourceDirName:"dev/spec",slug:"/dev/spec/server_items",permalink:"/help/dev/spec/server_items",draft:!1,editUrl:"https://github.com/laurent22/joplin/tree/dev/readme/dev/spec/server_items.md",tags:[],version:"current",frontMatter:{sidebar_label:"Joplin Server items"},sidebar:"helpSidebar",previous:{title:"Structure of file URLs in Joplin Server",permalink:"/help/dev/spec/server_file_url_format"},next:{title:"Joplin Server sharing feature",permalink:"/help/dev/spec/server_sharing"}},l={},p=[],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"joplin-server-items"},"Joplin Server items"),(0,i.kt)("div",{className:"donate-links"},(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.paypal.com/donate/?business=E8JMYD2LQ8MMA&no_recurring=0&item_name=I+rely+on+donations+to+maintain+and+improve+the+Joplin+open+source+project.+Thank+you+for+your+help+-+it+makes+a+difference%21&currency_code=EUR"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-PayPal-green.svg",alt:"Donate using PayPal"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sponsors/laurent22/"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/GitHub-Badge.svg",alt:"Sponsor on GitHub"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://www.patreon.com/joplin"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Patreon-Badge.svg",alt:"Become a patron"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://joplinapp.org/donate/#donations"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-IBAN.svg",alt:"Donate using IBAN"})))),(0,i.kt)("p",null,"To upload an item to Joplin Server:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Call ",(0,i.kt)("inlineCode",{parentName:"li"},"PUT /api/items")," with the serialized Joplin item. Examples of serialized items are described in ",(0,i.kt)("inlineCode",{parentName:"li"},"packages/app-cli/tests/support/syncTargetSnapshots")),(0,i.kt)("li",{parentName:"ul"},"That route is in ",(0,i.kt)("inlineCode",{parentName:"li"},"packages/server/src/routes/api/items.ts"),". In there it's going to do some basic processing on the item, and eventually will call ",(0,i.kt)("inlineCode",{parentName:"li"},"models.item().saveFromRawContent")),(0,i.kt)("li",{parentName:"ul"},"This ",(0,i.kt)("inlineCode",{parentName:"li"},"saveFromRawContent")," is where most of the job is done - it's going to detect what the item is, whether it's a note, notebook, etc. (this is the serialised content, as described above), or a binary file (resource).",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If it's a resource, the content is going to be saved as-is in the database"),(0,i.kt)("li",{parentName:"ul"},"If it's an item, it's going to deserialise it because we want to save certain properties separately in the database, such as the parent ID, the type (whether it's a note, notebook, etc.). We save these properties separately purely for performance reasons. Once the properties have been extracted, the rest of the object is serialised back to JSON and saved to the database."))),(0,i.kt)("li",{parentName:"ul"},"In the end, the content is saved to the ",(0,i.kt)("inlineCode",{parentName:"li"},"items")," table. The JSON item or the resource binary content will be saved to the ",(0,i.kt)("inlineCode",{parentName:"li"},"content")," field. Other Joplin items properties will be saved to the ",(0,i.kt)("inlineCode",{parentName:"li"},"jop_*")," fields. For example, the ID, the parent ID, whether encryption is enabled, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items.jop_id")," is the ID as it was generated on the client. ",(0,i.kt)("inlineCode",{parentName:"li"},"items.id")," is the server-side ID. We need two different IDs because we have no way to guarantee that ",(0,i.kt)("inlineCode",{parentName:"li"},"items.jop_id")," is globally unique since it's generated client-side."),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"ItemModel")," there are various utility functions to deal with the content. This is because it may be saved in different places depending on configuration. It can be saved to the ",(0,i.kt)("inlineCode",{parentName:"li"},"items.content")," field in the database, or it can be saved to S3, or to the filesystem. This is why any code that deals with item content must used these utility functions.")))}m.isMDXComponent=!0}}]);