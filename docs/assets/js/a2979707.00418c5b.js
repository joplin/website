"use strict";(self.webpackChunk_joplin_doc_builder=self.webpackChunk_joplin_doc_builder||[]).push([[3163],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return m}});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=s(o),h=a,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||i;return o?n.createElement(m,l(l({ref:t},u),{},{components:o})):n.createElement(m,l({ref:t},u))}));function m(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=o.length,l=new Array(i);l[0]=h;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[d]="string"==typeof e?e:a,l[1]=r;for(var s=2;s<i;s++)l[s]=o[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},96683:function(e,t,o){o.r(t),o.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return r},toc:function(){return s}});var n=o(87462),a=(o(67294),o(3905));const i={sidebar_label:"GSoC 2022 Ideas",title:"GSoC 2022 Ideas",description:"2022 is Joplin third round at Google Summer of Code. Detailed information on how to get involved and apply are given in the general Summer of Code introduction These are all proposals! We are open ..."},l="GSoC 2022 Ideas",r={unversionedId:"dev/gsoc/gsoc2022/ideas",id:"dev/gsoc/gsoc2022/ideas",title:"GSoC 2022 Ideas",description:"2022 is Joplin third round at Google Summer of Code. Detailed information on how to get involved and apply are given in the general Summer of Code introduction These are all proposals! We are open ...",source:"@site/help/dev/gsoc/gsoc2022/ideas.md",sourceDirName:"dev/gsoc/gsoc2022",slug:"/dev/gsoc/gsoc2022/ideas",permalink:"/help/dev/gsoc/gsoc2022/ideas",draft:!1,editUrl:"https://github.com/laurent22/joplin/tree/dev/readme/dev/gsoc/gsoc2022/ideas.md",tags:[],version:"current",frontMatter:{sidebar_label:"GSoC 2022 Ideas",title:"GSoC 2022 Ideas",description:"2022 is Joplin third round at Google Summer of Code. Detailed information on how to get involved and apply are given in the general Summer of Code introduction These are all proposals! We are open ..."},sidebar:"helpSidebar",previous:{title:"Google Summer of Code 2022",permalink:"/help/dev/gsoc/gsoc2022/"},next:{title:"Pull request guidelines",permalink:"/help/dev/gsoc/gsoc2022/pull_request_guidelines"}},p={},s=[{value:"Information for Contributors",id:"information-for-contributors",level:2},{value:"List of ideas",id:"list-of-ideas",level:2},{value:"1. Plugin system on mobile",id:"1-plugin-system-on-mobile",level:3},{value:"2. Seamless desktop application updates",id:"2-seamless-desktop-application-updates",level:3},{value:"3. Refactor the project documentation",id:"3-refactor-the-project-documentation",level:3},{value:"4. Implement default plugins on desktop application",id:"4-implement-default-plugins-on-desktop-application",level:3},{value:"5. Implement a toolbar for the mobile beta code editor",id:"5-implement-a-toolbar-for-the-mobile-beta-code-editor",level:3},{value:"6. Improve integration of the richtext/WYSIWYG editor",id:"6-improve-integration-of-the-richtextwysiwyg-editor",level:3},{value:"7. Improve PDF export",id:"7-improve-pdf-export",level:3},{value:"8. Replace built-in PDF renderer with a library",id:"8-replace-built-in-pdf-renderer-with-a-library",level:3},{value:"9. Rebuild file system sync on Android",id:"9-rebuild-file-system-sync-on-android",level:3},{value:"10. Tablet layout",id:"10-tablet-layout",level:3},{value:"11. Improve plugin search and discoverability",id:"11-improve-plugin-search-and-discoverability",level:3},{value:"12. Email plugin",id:"12-email-plugin",level:3},{value:"13. Desktop application integration testing",id:"13-desktop-application-integration-testing",level:3},{value:"14. Client settings sync",id:"14-client-settings-sync",level:3},{value:"More info",id:"more-info",level:2}],u={toc:s},d="wrapper";function c(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gsoc-2022-ideas"},"GSoC 2022 Ideas"),(0,a.kt)("div",{className:"donate-links"},(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.paypal.com/donate/?business=E8JMYD2LQ8MMA&no_recurring=0&item_name=I+rely+on+donations+to+maintain+and+improve+the+Joplin+open+source+project.+Thank+you+for+your+help+-+it+makes+a+difference%21&currency_code=EUR"},(0,a.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-PayPal-green.svg",alt:"Donate using PayPal"}))," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sponsors/laurent22/"},(0,a.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/GitHub-Badge.svg",alt:"Sponsor on GitHub"}))," ",(0,a.kt)("a",{parentName:"p",href:"https://www.patreon.com/joplin"},(0,a.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Patreon-Badge.svg",alt:"Become a patron"}))," ",(0,a.kt)("a",{parentName:"p",href:"https://joplinapp.org/donate/#donations"},(0,a.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-IBAN.svg",alt:"Donate using IBAN"})))),(0,a.kt)("p",null,"2022 is Joplin third round at Google Summer of Code. Detailed information on how to get involved and apply are given in the ",(0,a.kt)("a",{parentName:"p",href:"https://joplinapp.org/help/dev/gsoc/gsoc2022/"},"general Summer of Code introduction")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"These are all proposals! We are open to new ideas you might have!!")," Do you have an awesome idea you want to work on with Joplin but that is not among the ideas below? That's cool. We love that! But please do us a favour: Get in touch with a mentor early on and make sure your project is realistic and within the scope of Joplin. This year's themes are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Mobile and tablet development")," - we want to improve the mobile/tablet application on iOS and Android."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Plugin and external apps")," - leverage the Joplin API to create plugins and external apps."),(0,a.kt)("li",{parentName:"ul"},"And you are welcome to suggest your own ideas.")),(0,a.kt)("h2",{id:"information-for-contributors"},"Information for Contributors"),(0,a.kt)("p",null,"These ideas were contributed by our developers and users. They are sometimes vague or incomplete. If you wish to submit a proposal based on these ideas, you are urged to contact the developers and find out more about the particular suggestion you're looking at."),(0,a.kt)("p",null,"Becoming accepted as a Google Summer of Code contributor is quite competitive. Accepted contributors typically have thoroughly researched the technologies of their proposed project and have been in frequent contact with potential mentors. ",(0,a.kt)("strong",{parentName:"p"},"Simply copying and pasting an idea here will not work.")," On the other hand, creating a completely new idea without first consulting potential mentors rarely works."),(0,a.kt)("h2",{id:"list-of-ideas"},"List of ideas"),(0,a.kt)("h3",{id:"1-plugin-system-on-mobile"},"1. Plugin system on mobile"),(0,a.kt)("p",null,"The plugin system is currently available on desktop and CLI. We believe it could work on mobile too although some work will have to be done to make the plugin API compatible, as well as add a mechanism to load plugins."),(0,a.kt)("p",null,"Expected Outcome: Allow loading and running plugins on mobile"),(0,a.kt)("p",null,"Difficulty Level: High"),(0,a.kt)("p",null,"Skills Required: TypeScript, React Native"),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/PackElend"},"PackElend"),", ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/roman_r_m"},"Roman"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"2-seamless-desktop-application-updates"},"2. Seamless desktop application updates"),(0,a.kt)("p",null,'The desktop application currently supports automatic updates, however the process is not particularly smooth: the user is presented with a modal dialog, where they need to click "Download" and that opens the default browser to download the file. Then they need to run this file and go through the installer.'),(0,a.kt)("p",null,"We would like to make this process smoother:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The installer should be automatically downloaded in the background"),(0,a.kt)("li",{parentName:"ul"},"It should then install the app automatically when the next time the app is started"),(0,a.kt)("li",{parentName:"ul"},"And this should work at least on Windows and macOS (Linux may be special due to the different distribution methods)")),(0,a.kt)("p",null,"Expected Outcome: The app shall inform the user that an update is available. If an update shall be applied, the installer runs the update process fully automatically in the background during the next startup. It shall be explored if a live update is feasible and how conflicts can be resolved as used files are to be replaced."),(0,a.kt)("p",null,"Difficulty Level: Medium"),(0,a.kt)("p",null,"Skills Required: TypeScript, React. Some knowledge of Electron and electron-builder."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CalebJohn/"},"CalebJohn")),(0,a.kt)("p",null,"Expected size of project: 175 hours"),(0,a.kt)("h3",{id:"3-refactor-the-project-documentation"},"3. Refactor the project documentation"),(0,a.kt)("p",null,"The current documentation (under ",(0,a.kt)("a",{parentName:"p",href:"https://joplinapp.org/help"},"joplinapp.org/help"),") is mainly a giant ",(0,a.kt)("a",{parentName:"p",href:"http://README.md"},"README.md")," file and various smaller Markdown files under /readme. All this is then built into the HTML website by a script."),(0,a.kt)("p",null,"We would like to improve this by splitting the main readme into smaller sections, have a new menu that would reorganise the help into various topics, and of course the build script will need to be updated."),(0,a.kt)("p",null,"A good part of this project will be about researching how other projects organise their documentation, proposing a way that would work well for Joplin, and discussing your ideas with the mentors and users. You will need to be proactive and propose your own solution on how to structure the documentation - which sections and sub-sections should be created, how to split the existing README into smaller parts, etc."),(0,a.kt)("p",null,"This is still a technical project though since you will need to deal with TypeScript, Markdown, HTML and CSS (and any other technology that might help) to build the new documentation."),(0,a.kt)("p",null,"Expected Outcome: A new documentation with complete scripts to build it along with CI integration."),(0,a.kt)("p",null,"Difficulty Level: High"),(0,a.kt)("p",null,"Skills Required: TypeScript, JavaScript, CSS, HTML, Markdown rendering."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/Daeraxa"},"Daeraxa"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"4-implement-default-plugins-on-desktop-application"},"4. Implement default plugins on desktop application"),(0,a.kt)("p",null,"We would like to bundle certain plugins with the desktop application, such as the Backup or Rich Markdown plugin. Some process needs to be implemented so that they are bundled and updated automatically. You'll have to consider how it will work on CI, and across platform. The process should be fault tolerant and retry when something fails."),(0,a.kt)("p",null,"Expected Outcome: A system for bundling certain plugins with Joplin releases, along with accompanying documentation on how to bundle plugins."),(0,a.kt)("p",null,"Difficulty Level: High"),(0,a.kt)("p",null,"Skills Required: TypeScript, JavaScript, knowledge of Electron and GitHub Actions."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CalebJohn/"},"CalebJohn"),", ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/JackGruber"},"JackGruber")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"5-implement-a-toolbar-for-the-mobile-beta-code-editor"},"5. Implement a toolbar for the mobile beta code editor"),(0,a.kt)("p",null,'We would like the Beta code editor to eventually become the main editor, and for that a number of changes need to be made. The main one would be the addition of a toolbar to it, to set the various styles, such as Bold, Bullet list, Header, etc. Additionally there are number of bugs that will have to be fixed to get the editor ready for production - you will find them in the list of issues (under the "high" and "mobile" label).'),(0,a.kt)("p",null,"Expected Outcome: Main: A new mobile editor toolbar. Secondary: Fix the bugs in the beta editor"),(0,a.kt)("p",null,"Difficulty Level: High"),(0,a.kt)("p",null,"Skills Required: TypeScript, JavaScript, React Native, React Hooks. You'll also need to learn about CodeMirror 6 if you're not already familiar with it."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CalebJohn/"},"CalebJohn"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"6-improve-integration-of-the-richtextwysiwyg-editor"},"6. Improve integration of the richtext/WYSIWYG editor"),(0,a.kt)("p",null,"Joplin offers a richtext/WYSIWYG typing experience alongside the Markdown editor but there are a number of areas that could do with improvement when it comes to integration with Joplin as a whole."),(0,a.kt)("p",null,"Areas for consideration include increasing compatibility with Joplin-wide keybindings (many are currently static), limiting features of the editor not compatible with markdown formatting, reducing the impact of data changes caused by swapping between editors."),(0,a.kt)("p",null,"Also read the document about limitations of the editor: ",(0,a.kt)("a",{parentName:"p",href:"https://joplinapp.org/help/apps/rich_text_editor/"},"https://joplinapp.org/rich_text_editor/")),(0,a.kt)("p",null,"Expected Outcome: Removal of non-functional formatting options, alignment of generic Joplin editor options as well general improvements in editor usability."),(0,a.kt)("p",null,"Difficulty level: High"),(0,a.kt)("p",null,"Skills Required: Typescript, Javascript, CSS, HTML, Markdown rendering. You will also need to learn about TinyMCE if you're not already familiar with it."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/Daeraxa"},"Daeraxa")),(0,a.kt)("p",null,"Expected size of project: 175 hours"),(0,a.kt)("h3",{id:"7-improve-pdf-export"},"7. Improve PDF export"),(0,a.kt)("p",null,"Joplin uses Chrome's built-in print to PDF function which is very limited. This can be improved by using a 3rd party library to convert notes to PDF. Applies to desktop and CLI versions."),(0,a.kt)("p",null,"Potential benefits:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Export multiple notes as a single PDF"),(0,a.kt)("li",{parentName:"ul"},"Embedding attachments (see ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/laurent22/joplin/issues/5943"},"https://github.com/laurent22/joplin/issues/5943"),")"),(0,a.kt)("li",{parentName:"ul"},"Delay export until the note is fully rendered (",(0,a.kt)("a",{parentName:"li",href:"https://discourse.joplinapp.org/t/ability-to-delay-pdf-export-to-allow-plugins-to-render/22159"},"https://discourse.joplinapp.org/t/ability-to-delay-pdf-export-to-allow-plugins-to-render/22159"),")")),(0,a.kt)("p",null,"Expected Outcome: PDF export no longer relies on Chrome print to pdf"),(0,a.kt)("p",null,"Difficulty level: Medium"),(0,a.kt)("p",null,"Skills Required: Typescript, Javascript."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/roman_r_m"},"Roman"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CalebJohn/"},"CalebJohn")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"8-replace-built-in-pdf-renderer-with-a-library"},"8. Replace built-in PDF renderer with a library"),(0,a.kt)("p",null,"Just like with export, Joplin relies on the built-in PDF renderer to show PDF attachments. Replacing it with a 3rd-party library has a number of advantages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Joplin can preserve PDF viewer state when a note is re-rendered. For instance currently after opening and closing settings, PDF are reset to the 1st page."),(0,a.kt)("li",{parentName:"ul"},"It may be possible to link to a specific page or even a location within a PDF document."),(0,a.kt)("li",{parentName:"ul"},"Annotate PDF documents from Joplin")),(0,a.kt)("p",null,"Expected Outcome: a library is used to render PDFs"),(0,a.kt)("p",null,"Difficulty level: Medium"),(0,a.kt)("p",null,"Skills Required: Typescript, Javascript."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/roman_r_m"},"Roman"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CalebJohn/"},"CalebJohn")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"9-rebuild-file-system-sync-on-android"},"9. Rebuild file system sync on Android"),(0,a.kt)("p",null,"A recent update broke file system synchronization on Android, as applications are now required to use a new API to access storage. Currently there are no libraries that would proxy this API for React Native. If we want to get file system sync working again it has to be written from scratch."),(0,a.kt)("p",null,"Expected Outcome: File system sync works on all Android versions"),(0,a.kt)("p",null,"Difficulty level: High"),(0,a.kt)("p",null,"Skills Required: Android, Java/Kotlin, Typescript."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/roman_r_m"},"Roman")),(0,a.kt)("p",null,"Expected size of project: 175 hours"),(0,a.kt)("h3",{id:"10-tablet-layout"},"10. Tablet layout"),(0,a.kt)("p",null,"On wide screens devices like tables Joplin could use a different layout, e.g. with note list always showing, or have both editor and viewer visible at the same time. What component is visible should be optional - for example, the user may want to see the note list, but hide the sidebar. This change will have to be implemented in such a way that it doesn't break the regular, mobile-only layout."),(0,a.kt)("p",null,"Expected Outcome: A new tablet-specific layout, with sidebar, note list and editor always visible."),(0,a.kt)("p",null,"Difficulty Level: High"),(0,a.kt)("p",null,"Skills Required: React, Typescript, CSS."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"11-improve-plugin-search-and-discoverability"},"11. Improve plugin search and discoverability"),(0,a.kt)("p",null,"As there are more and more plugins it would be good to improve how they are discovered, and to improve search - in particular improve search relevance."),(0,a.kt)("p",null,"In practice, we would want the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A page under ",(0,a.kt)("inlineCode",{parentName:"li"},"joplinapp.org/plugins")," that lists recommended plugins, trending plugins, etc. similar to ",(0,a.kt)("a",{parentName:"li",href:"https://addons.mozilla.org/en-GB/firefox/"},"Add-ons for Firefox"),". From here it should also be possible to search for plugins."),(0,a.kt)("li",{parentName:"ul"},"Each plugin should have a page under ",(0,a.kt)("inlineCode",{parentName:"li"},"joplinapp.org/plugins/PLUGIN_NAME")," that provides detailed info about the plugin (info would come from manifest.json). If the plugin manifest links to a README file perhaps we can also fetch it and display it there?"),(0,a.kt)("li",{parentName:"ul"},"In the app, use the info from stats.json to order the plugin - those with more downloads going on top for example")),(0,a.kt)("p",null,"All the above can be done using the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/joplin/plugins#readme"},"info from the plugin repo"),", in particular using manifests.json and stats.json. You would use this to implement the above functionalities. Moreover, the ",(0,a.kt)("inlineCode",{parentName:"p"},"joplinapp.org")," pages should be dynamically generated using a script and this should be integrated with CI."),(0,a.kt)("p",null,"Expected Outcome: Primary: An automatically generated website under ",(0,a.kt)("inlineCode",{parentName:"p"},"joplinapp.org/plugins"),". Secondary: Improved plugin search in the desktop app"),(0,a.kt)("p",null,"Difficulty Level: Medium"),(0,a.kt)("p",null,"Skills Required: Typescript, CSS, GitHub Actions."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/JackGruber"},"JackGruber"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"12-email-plugin"},"12. Email plugin"),(0,a.kt)("p",null,"Create a plugin to fetch mail via IMAP and convert messages to notes (including attachments). The plugin should be able to filter what messages it downloads, e.g. based on the folder."),(0,a.kt)("p",null,"Additional features to consider:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"support more than one account"),(0,a.kt)("li",{parentName:"ul"},"convert HTML to Markdown"),(0,a.kt)("li",{parentName:"ul"},"delete/move received emails")),(0,a.kt)("p",null,"Expected Outcome: Email plugin (with the features described above) is available to install from the plugin repo."),(0,a.kt)("p",null,"Difficulty Level: Medium"),(0,a.kt)("p",null,"Skills Required: TypeScript, JavaScript."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/roman_r_m"},"Roman"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"13-desktop-application-integration-testing"},"13. Desktop application integration testing"),(0,a.kt)("p",null,"The desktop app front end has a few unit tests to verify things like React hooks and certain utility functions. However we currently have no integration testing to verify for example that a change in one component didn't break something in another component. This project would be about setting up this integration testing for the desktop app. You would do the setup and probably also write a few tests to demonstrate that it's working as expected. More info at ",(0,a.kt)("a",{parentName:"p",href:"https://www.electronjs.org/docs/latest/tutorial/automated-testing"},"https://www.electronjs.org/docs/latest/tutorial/automated-testing")),(0,a.kt)("p",null,"Expected Outcome: The student will have a good understanding on how to setup automated testing of the desktop app, and will have implemented automated testing for at least a subset of the application (e.g. Markdown editor and WYSIWYG editor)"),(0,a.kt)("p",null,"Difficulty Level: High"),(0,a.kt)("p",null,"Skills Required: TypeScript, JavaScript, Electron."),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CalebJohn/"},"CalebJohn"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h3",{id:"14-client-settings-sync"},"14. Client settings sync"),(0,a.kt)("p",null,"Whenever settings are changed on one client these are not replicated to other clients connected to the same sync target."),(0,a.kt)("p",null,"This project would be about creating synchronisation between clients to allow a single configuration rather than having to set them up separately on each e.g. keyboard shortcuts, installed plugins, Markdown plugins, note history etc."),(0,a.kt)("p",null,"Expected Outcome: Generic cross platform options synchronisation as well as options specific to particular platform via the existing synchronisation feature."),(0,a.kt)("p",null,"Difficulty Level: High"),(0,a.kt)("p",null,"Skills Required: TypeScript, JavaScript"),(0,a.kt)("p",null,"Potential Mentor(s): ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/Daeraxa"},"Daeraxa"),", ",(0,a.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/u/JackGruber"},"JackGruber"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/laurent22/"},"Laurent")),(0,a.kt)("p",null,"Expected size of project: 350 hours"),(0,a.kt)("h2",{id:"more-info"},"More info"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Make sure you read the ",(0,a.kt)("a",{parentName:"li",href:"https://joplinapp.org/help/dev/gsoc/gsoc2022/"},"Joplin Google Summer of Code Introduction")),(0,a.kt)("li",{parentName:"ul"},"To build the application, please read ",(0,a.kt)("a",{parentName:"li",href:"/help/dev/BUILD"},"BUILD.md")),(0,a.kt)("li",{parentName:"ul"},"And before creating a pull request, please read the ",(0,a.kt)("a",{parentName:"li",href:"https://joplinapp.org/help/dev/gsoc/gsoc2022/pull_request_guidelines/"},"pull request guidelines"))))}c.isMDXComponent=!0}}]);