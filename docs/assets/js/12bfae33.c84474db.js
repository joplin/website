"use strict";(self.webpackChunk_joplin_doc_builder=self.webpackChunk_joplin_doc_builder||[]).push([[2763],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3063:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var a=n(7462),r=(n(7294),n(3905));const o={created:new Date("2020-11-30T14:59:37.000Z"),source_url:"https://www.patreon.com/posts/plugin-support-4-44478322",sidebar_label:"Plugin support available in Joplin v1.4",date:new Date("2020-11-30T00:00:00.000Z"),title:"Plugin support available in Joplin v1.4",description:"The plugin system has been part of Joplin since the previous version, however it was still a bit unstable. In the latest version we're getting a bit closer to production-ready state. The plugin API...",image:"https://joplinapp.org/images/news/20201130-145937_0.png"},i="Plugin support available in Joplin v1.4",s={permalink:"/news/20201130-145937",editUrl:"https://github.com/laurent22/joplin/tree/dev/readme/news/20201130-145937.md",source:"@site/news/20201130-145937.md",title:"Plugin support available in Joplin v1.4",description:"The plugin system has been part of Joplin since the previous version, however it was still a bit unstable. In the latest version we're getting a bit closer to production-ready state. The plugin API...",date:"2020-11-30T00:00:00.000Z",formattedDate:"November 30, 2020",tags:[],readingTime:1.955,hasTruncateMarker:!1,authors:[],frontMatter:{created:"2020-11-30T14:59:37.000Z",source_url:"https://www.patreon.com/posts/plugin-support-4-44478322",sidebar_label:"Plugin support available in Joplin v1.4",date:"2020-11-30T00:00:00.000Z",title:"Plugin support available in Joplin v1.4",description:"The plugin system has been part of Joplin since the previous version, however it was still a bit unstable. In the latest version we're getting a bit closer to production-ready state. The plugin API...",image:"https://joplinapp.org/images/news/20201130-145937_0.png"},prevItem:{title:"Changing the application layout in v1.4",permalink:"/news/20201212-172039"},nextItem:{title:"Spell checker support now available in v1.4",permalink:"/news/20201126-114649"}},l={authorsImageUrls:[]},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"donate-links"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.paypal.com/donate/?business=E8JMYD2LQ8MMA&no_recurring=0&item_name=I+rely+on+donations+to+maintain+and+improve+the+Joplin+open+source+project.+Thank+you+for+your+help+-+it+makes+a+difference%21&currency_code=EUR"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-PayPal-green.svg",alt:"Donate using PayPal"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sponsors/laurent22/"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/GitHub-Badge.svg",alt:"Sponsor on GitHub"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://www.patreon.com/joplin"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Patreon-Badge.svg",alt:"Become a patron"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/donate/#donations"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-IBAN.svg",alt:"Donate using IBAN"})))),(0,r.kt)("p",null,"The plugin system has been part of Joplin since the previous version, however it was still a bit unstable. In the latest version we're getting a bit closer to production-ready state. The ",(0,r.kt)("a",{parentName:"p",href:"/help/api"},"plugin API")," in particular has been significantly expanded, based on the developer feedback, so that more types of plugin are possible now, and indeed a few plugin concepts have started appearing on the forums. In particular all this could be done now:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Access notes, folders, etc. via the data API"),(0,r.kt)("li",{parentName:"ul"},"Add a view to display custom data using HTML/CSS/JS"),(0,r.kt)("li",{parentName:"ul"},"Create a dialog to display information and get input from the user"),(0,r.kt)("li",{parentName:"ul"},"Create a new command and associate a toolbar button or menu item with it"),(0,r.kt)("li",{parentName:"ul"},"Get access to the note currently being edited and modify it"),(0,r.kt)("li",{parentName:"ul"},"Listen to various events and run code when they happen"),(0,r.kt)("li",{parentName:"ul"},"Hook into the application to set additional options and customise Joplin's behaviour"),(0,r.kt)("li",{parentName:"ul"},"Create a module to export or import data into Joplin"),(0,r.kt)("li",{parentName:"ul"},"Define new settings and setting sections, and get/set them from the plugin"),(0,r.kt)("li",{parentName:"ul"},"Create a new Markdown plugin to render custom markup."),(0,r.kt)("li",{parentName:"ul"},"Create an editor plugin to modify low-level the behaviour of the Markdown editor (CodeMirror)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Plugin JPL format and configuration screen")),(0,r.kt)("p",null,"The plugin configuration screen has also been updated so that it's possible to import the new JPL (",(0,r.kt)("strong",{parentName:"p"},"J"),"oplin ",(0,r.kt)("strong",{parentName:"p"},"PL"),"ugin) format and to enable/disable as well as uninstall plugins."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/news/20201130-145937_0.png",alt:null})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What's next?")),(0,r.kt)("p",null,"It is now possible to create new plugins, package them into the JPL format, and to install them into the app."),(0,r.kt)("p",null,"The last piece missing is a way to discover and share plugins, and a way to update them easily, basically what we need is an online package manager. It is not clear yet how this is going to be done, but one idea would be to have a GitHub repository where anyone could submit or update a plugin, then the app would connect to that repository to make it easy to install new plugins. This is just an idea at this point though, and if you have any suggestion on other ways it could be done, feel free to let me know. A ",(0,r.kt)("a",{parentName:"p",href:"https://discourse.joplinapp.org/t/plugin-repository/12692"},"discussion about it")," has been started in the forum."))}d.isMDXComponent=!0}}]);