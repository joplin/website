"use strict";(self.webpackChunk_joplin_doc_builder=self.webpackChunk_joplin_doc_builder||[]).push([[7279],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||r;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=h;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7777:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return s}});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_label:"Building the applications",title:"Building the applications",description:"The Joplin source code is hosted on a monorepo and is managed using Yarn workspaces (as well as Lerna for publishing the packages). The list of the main sub-packages is below: Package name Descript..."},l="Building the applications",o={unversionedId:"dev/BUILD",id:"dev/BUILD",title:"Building the applications",description:"The Joplin source code is hosted on a monorepo and is managed using Yarn workspaces (as well as Lerna for publishing the packages). The list of the main sub-packages is below: Package name Descript...",source:"@site/help/dev/BUILD.md",sourceDirName:"dev",slug:"/dev/BUILD",permalink:"/fr/help/dev/BUILD",draft:!1,editUrl:"https://github.com/laurent22/joplin/tree/dev/readme/dev/BUILD.md",tags:[],version:"current",frontMatter:{sidebar_label:"Building the applications",title:"Building the applications",description:"The Joplin source code is hosted on a monorepo and is managed using Yarn workspaces (as well as Lerna for publishing the packages). The list of the main sub-packages is below: Package name Descript..."},sidebar:"helpSidebar",previous:{title:"Ideas",permalink:"/fr/help/dev/gsoc/gsod2020/ideas"},next:{title:"Deploying Joplin apps and scripts",permalink:"/fr/help/dev/DEPLOY"}},p={},s=[{value:"Required dependencies",id:"required-dependencies",level:2},{value:"Building",id:"building",level:2},{value:"Testing the desktop application",id:"testing-the-desktop-application",level:2},{value:"Testing the Terminal application",id:"testing-the-terminal-application",level:2},{value:"Testing the Mobile application",id:"testing-the-mobile-application",level:2},{value:"Android",id:"android",level:3},{value:"iOS",id:"ios",level:3},{value:"Building the clipper",id:"building-the-clipper",level:2},{value:"Watching files",id:"watching-files",level:2},{value:"Running an application with additional parameters",id:"running-an-application-with-additional-parameters",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Hot reload",id:"hot-reload",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"building-the-applications"},"Building the applications"),(0,i.kt)("div",{className:"donate-links"},(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.paypal.com/donate/?business=E8JMYD2LQ8MMA&no_recurring=0&item_name=I+rely+on+donations+to+maintain+and+improve+the+Joplin+open+source+project.+Thank+you+for+your+help+-+it+makes+a+difference%21&currency_code=EUR"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-PayPal-green.svg",alt:"Donate using PayPal"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sponsors/laurent22/"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/GitHub-Badge.svg",alt:"Sponsor on GitHub"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://www.patreon.com/joplin"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Patreon-Badge.svg",alt:"Become a patron"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://joplinapp.org/donate/#donations"},(0,i.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-IBAN.svg",alt:"Donate using IBAN"})))),(0,i.kt)("p",null,"The Joplin source code is hosted on a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Monorepo"},"monorepo")," and is managed using Yarn workspaces (as well as Lerna for publishing the packages)."),(0,i.kt)("p",null,"The list of the main sub-packages is below:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Package name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"app-cli"),(0,i.kt)("td",{parentName:"tr",align:null},"The CLI application")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"app-clipper"),(0,i.kt)("td",{parentName:"tr",align:null},"The web clipper")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"app-desktop"),(0,i.kt)("td",{parentName:"tr",align:null},"The desktop application")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"app-mobile"),(0,i.kt)("td",{parentName:"tr",align:null},"The mobile application")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"lib"),(0,i.kt)("td",{parentName:"tr",align:null},"The core library, shared by all applications. It deals with things like synchronisation, encryption, import/export, database and pretty much all the app business logic")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"renderer"),(0,i.kt)("td",{parentName:"tr",align:null},"The Joplin Markdown and HTML renderer")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tools"),(0,i.kt)("td",{parentName:"tr",align:null},"Tools used to build the apps and other tasks")))),(0,i.kt)("p",null,'There are also a few forks of existing packages under the "fork-*" name.'),(0,i.kt)("h2",{id:"required-dependencies"},"Required dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install Node 16+. On Windows, also install the build tools - ",(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"https://nodejs.org/en/"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://yarnpkg.com/getting-started/install"},"Enable Yarn"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"corepack enable")))),(0,i.kt)("li",{parentName:"ul"},"macOS: Install Cocoapods - ",(0,i.kt)("inlineCode",{parentName:"li"},"brew install cocoapods"),". Apple Silicon ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/laurent22/joplin/pull/5966#issuecomment-1007158597"},"may require libvips")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"brew install vips"),"."),(0,i.kt)("li",{parentName:"ul"},"Linux: Install dependencies - ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo apt install build-essential libnss3 libsecret-1-dev python rsync"))),(0,i.kt)("h2",{id:"building"},"Building"),(0,i.kt)("p",null,"Make sure the path to the project directory does not contain spaces or the build may fail."),(0,i.kt)("p",null,"Before doing anything else, from the root of the project, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn install\n")),(0,i.kt)("p",null,"Then you can test the various applications:"),(0,i.kt)("h2",{id:"testing-the-desktop-application"},"Testing the desktop application"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd packages/app-desktop\nyarn start\n")),(0,i.kt)("p",null,"You can also run it under WSL 2. To do so, ",(0,i.kt)("a",{parentName:"p",href:"https://www.beekeeperstudio.io/blog/building-electron-windows-ubuntu-wsl2"},"follow these instructions")," to setup your environment."),(0,i.kt)("h2",{id:"testing-the-terminal-application"},"Testing the Terminal application"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd packages/app-cli\nyarn start\n")),(0,i.kt)("h2",{id:"testing-the-mobile-application"},"Testing the Mobile application"),(0,i.kt)("p",null,"First you need to setup React Native to build projects with native code. For this, follow the instructions in the ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/environment-setup"},"Setting up the development environment"),' tutorial, in the "React Native CLI Quickstart" tab.'),(0,i.kt)("h3",{id:"android"},"Android"),(0,i.kt)("p",null,"Run this to build and install the app on the emmulator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd packages/app-mobile/android\n./gradlew installDebug # or gradlew.bat installDebug on Windows\n")),(0,i.kt)("h3",{id:"ios"},"iOS"),(0,i.kt)("p",null,"On iOS, you need to run ",(0,i.kt)("inlineCode",{parentName:"p"},"pod install"),", which is not done automatically during build time (since it takes too long). You have two options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build the app using ",(0,i.kt)("inlineCode",{parentName:"li"},"RUN_POD_INSTALL=1 yarn install")),(0,i.kt)("li",{parentName:"ul"},"Or manually run ",(0,i.kt)("inlineCode",{parentName:"li"},"pod install")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"packages/app-mobile/ios"))),(0,i.kt)("p",null,"Once this is done, open the file ",(0,i.kt)("inlineCode",{parentName:"p"},"ios/Joplin.xcworkspace")," on XCode and run the app from there."),(0,i.kt)("p",null,"Normally the ",(0,i.kt)("strong",{parentName:"p"},"bundler")," should start automatically with the application. If it doesn't, run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn start")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"packages/app-mobile"),"."),(0,i.kt)("h2",{id:"building-the-clipper"},"Building the clipper"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd packages/app-clipper/popup\nnpm run watch # To watch for changes\n")),(0,i.kt)("p",null,"To test the extension please refer to the relevant pages for each browser: ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension#Trying_it_out"},"Firefox")," / ",(0,i.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/extensions/mv3/getstarted/"},"Chrome"),". Please note that the extension in dev mode will only connect to a dev instance of the desktop app (and vice-versa)."),(0,i.kt)("h2",{id:"watching-files"},"Watching files"),(0,i.kt)("p",null,"To make changes to the application, you'll need to rebuild any TypeScript file you've changed. The simplest way to do this is to watch for changes from the root of the project. Simply run this command, and it should take care of the rest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn run watch\n")),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn run tsc")," would have the same effect, but without watching."),(0,i.kt)("h2",{id:"running-an-application-with-additional-parameters"},"Running an application with additional parameters"),(0,i.kt)("p",null,"You can specify additional parameters when running the desktop or CLI application. To do so, add ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn start")," command, followed by your flags. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn start --debug\n")),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("p",null,"The application was originally written in JavaScript, however it has slowly been migrated to ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript"),'. New classes and files should be written in TypeScript. All compiled files are generated next to the .ts or .tsx file. So for example, if there\'s a file "lib/MyClass.ts", there will be a generated "lib/MyClass.js" next to it. It is implemented that way as it requires minimal changes to integrate TypeScript in the existing JavaScript code base.'),(0,i.kt)("h2",{id:"hot-reload"},"Hot reload"),(0,i.kt)("p",null,"If you'd like to auto-reload the desktop app on changes rather than having to quit and restart it manually each time, you can use ",(0,i.kt)("a",{parentName:"p",href:"https://facebook.github.io/watchman/docs/watchman-make.html"},"watchman-make"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cd packages/app-desktop\nwatchman-make -p '**/*.js' '**/*.jsx' --run \"yarn start\"\n")),(0,i.kt)("p",null,"It still requires you to quit the application each time you want it to rebuild, but at least you don't have to re-run ",(0,i.kt)("inlineCode",{parentName:"p"},'"yarn start"')," each time. Here's what the workflow loop looks like in practice:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Edit and save files in your text editor."),(0,i.kt)("li",{parentName:"ol"},"Switch to the Electron app and ",(0,i.kt)("kbd",null,"cmd"),"+",(0,i.kt)("kbd",null,"Q")," to quit it."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"watchman")," immediately restarts the app for you (whereas usually you'd have to switch back to the terminal, type ",(0,i.kt)("inlineCode",{parentName:"li"},'"yarn start"'),", and hit enter).")),(0,i.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,i.kt)("p",null,"Please read for the ",(0,i.kt)("a",{parentName:"p",href:"/help/dev/build_troubleshooting"},"Build Troubleshooting Document")," for various tips on how to get the build working."))}c.isMDXComponent=!0}}]);