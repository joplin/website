"use strict";(self.webpackChunk_joplin_doc_builder=self.webpackChunk_joplin_doc_builder||[]).push([[9285],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=r,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||o;return n?i.createElement(m,a(a({ref:t},c),{},{components:n})):i.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8368:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l}});var i=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2,sidebar_label:"Creating a Markdown editor plugin",title:"Creating a Markdown editor plugin",description:"This guide demonstrates how to create a Markdown editor plugin. It expects you to have first read the table of contents tutorial or have basic plugin development experience. :::note This guide desc..."},a="Creating a Markdown editor plugin",s={unversionedId:"api/tutorials/cm6_plugin",id:"api/tutorials/cm6_plugin",title:"Creating a Markdown editor plugin",description:"This guide demonstrates how to create a Markdown editor plugin. It expects you to have first read the table of contents tutorial or have basic plugin development experience. :::note This guide desc...",source:"@site/help/api/tutorials/cm6_plugin.md",sourceDirName:"api/tutorials",slug:"/api/tutorials/cm6_plugin",permalink:"/fr/help/api/tutorials/cm6_plugin",draft:!1,editUrl:"https://github.com/laurent22/joplin/tree/dev/readme/api/tutorials/cm6_plugin.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Creating a Markdown editor plugin",title:"Creating a Markdown editor plugin",description:"This guide demonstrates how to create a Markdown editor plugin. It expects you to have first read the table of contents tutorial or have basic plugin development experience. :::note This guide desc..."},sidebar:"helpSidebar",previous:{title:"Creating a table of content plugin",permalink:"/fr/help/api/tutorials/toc_plugin"},next:{title:"Joplin Plugin API",permalink:"/fr/help/api/references/plugin_api_index"}},p={},l=[{value:"Setup",id:"setup",level:2},{value:"Create the plugin",id:"create-the-plugin",level:3},{value:"Update the plugin build script",id:"update-the-plugin-build-script",level:3},{value:"Content script setup",id:"content-script-setup",level:2},{value:"Create the content script",id:"create-the-content-script",level:3},{value:"Register the content script",id:"register-the-content-script",level:3},{value:"Register CodeMirror extensions from the content script",id:"register-codemirror-extensions-from-the-content-script",level:3},{value:"Try it!",id:"try-it",level:3},{value:"Connect to the main script",id:"connect-to-the-main-script",level:2},{value:"Register a setting",id:"register-a-setting",level:3},{value:"Create an <code>onMessage</code> listener that returns the setting value",id:"create-an-onmessage-listener-that-returns-the-setting-value",level:3},{value:"Get the setting from the content script",id:"get-the-setting-from-the-content-script",level:3},{value:"Style the active line",id:"style-the-active-line",level:3},{value:"CodeMirror 5 compatibility",id:"codemirror-5-compatibility",level:2},{value:"Create a content script for CodeMirror 5",id:"create-a-content-script-for-codemirror-5",level:3},{value:"Register the content script",id:"register-the-content-script-1",level:3},{value:"Update the CodeMirror 5 content script",id:"update-the-codemirror-5-content-script",level:3},{value:"Make the CodeMirror 6 content script only load in CodeMirror 6",id:"make-the-codemirror-6-content-script-only-load-in-codemirror-6",level:3},{value:"Summary",id:"summary",level:3},{value:"See also",id:"see-also",level:2}],c={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-a-markdown-editor-plugin"},"Creating a Markdown editor plugin"),(0,r.kt)("div",{className:"donate-links"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.paypal.com/donate/?business=E8JMYD2LQ8MMA&no_recurring=0&item_name=I+rely+on+donations+to+maintain+and+improve+the+Joplin+open+source+project.+Thank+you+for+your+help+-+it+makes+a+difference%21&currency_code=EUR"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-PayPal-green.svg",alt:"Donate using PayPal"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sponsors/laurent22/"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/GitHub-Badge.svg",alt:"Sponsor on GitHub"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://www.patreon.com/joplin"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Patreon-Badge.svg",alt:"Become a patron"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/donate/#donations"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/WebsiteAssets/images/badges/Donate-IBAN.svg",alt:"Donate using IBAN"})))),(0,r.kt)("p",null,"This guide demonstrates how to create a Markdown editor plugin. It expects you to have first read ",(0,r.kt)("a",{parentName:"p",href:"/fr/help/api/tutorials/toc_plugin"},"the table of contents tutorial")," or have basic plugin development experience."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This guide describes how to create a plugin for Joplin's ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/"},"CodeMirror 6"),"-based Markdown editor, which is still in beta. It must be enabled in settings ",">"," general."),(0,r.kt)("p",{parentName:"admonition"},"Plugins for this editor may not work in Joplin 2.13 or earlier.")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("h3",{id:"create-the-plugin"},"Create the plugin"),(0,r.kt)("p",null,"Start by ",(0,r.kt)("a",{parentName:"p",href:"/fr/help/api/get_started/plugins"},"creating the plugin with ",(0,r.kt)("inlineCode",{parentName:"a"},"yo joplin")),". The beta Markdown editor is still new, so make sure the ",(0,r.kt)("inlineCode",{parentName:"p"},"joplin")," generator is up-to-date."),(0,r.kt)("p",null,"You should now have a directory structure similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\ud83d\udcc2 codemirror6-plugin/\n  \u23d0 \ud83d\udcc2 publish/\n  \u23d0 \ud83d\udcc2 api/\n  \u23d0 \ud83d\udcc2 node_modules/\n  \u23d0 \ud83d\udcc2 dist/\n  \u23d0 \ud83d\udcc2 src/\n  \u23d0   \u23d0 manifest.json\n  \u23d0   \u23d0 index.ts\n  \u23d0 webpack.config.js\n  \u23d0 tsconfig.json\n  \u23d0 package-lock.json\n  \u23d0 README.md\n  \u23d0 .gitignore\n  \u23d0 plugin.config.json\n  \u23d0 .npmignore\n  \u23d0 GENERATOR_DOC.md\n  \u23d0 package.json\n")),(0,r.kt)("h3",{id:"update-the-plugin-build-script"},"Update the plugin build script"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"At the time of this writing, this section was necessary. If Joplin 2.14 is no longer in pre-release, you might be able to skip this section.")),(0,r.kt)("p",null,"To create a plugin that supports the beta editor, you'll want to update ",(0,r.kt)("inlineCode",{parentName:"p"},"webpack.config.js")," to the latest version. Doing this allows importing CodeMirror packages without bundling additional copies of them with the plugin."),(0,r.kt)("p",null,"To do this, replace the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"webpack.config.js")," with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/laurent22/joplin/blob/dev/packages/generator-joplin/generators/app/templates/webpack.config.js"},"the unreleased version of ",(0,r.kt)("inlineCode",{parentName:"a"},"webpack.config.js")," on Joplin's GitHub repository"),"."),(0,r.kt)("h2",{id:"content-script-setup"},"Content script setup"),(0,r.kt)("h3",{id:"create-the-content-script"},"Create the content script"),(0,r.kt)("p",null,"Now that the plugin has been created, we can create and register a CodeMirror content script."),(0,r.kt)("p",null,"Start by opening ",(0,r.kt)("inlineCode",{parentName:"p"},"plugin.config.json"),".It should look similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "extraScripts": []\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},'"extraScripts"')," entry provides a list of TypeScript files that will be compiled ",(0,r.kt)("strong",{parentName:"p"},"in addition")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/index.ts"),". This will allow registering built versions of these files as CodeMirror or ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/api/references/plugin_api/enums/contentscripttype.html#markdownitplugin"},"renderer content scripts"),"."),(0,r.kt)("p",null,"To add a content script, start by creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScript.ts")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory. Next, add the path to ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScript.ts")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"extraScripts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'{\n-   "extraScripts": []\n+   "extraScripts": ["contentScript.ts"]\n}\n')),(0,r.kt)("p",null,"Notice that the above path is relative to the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory."),(0,r.kt)("p",null,"The plugin's directory structure should now look similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\ud83d\udcc2 codemirror6-plugin/\n  \u23d0 \ud83d\udcc2 publish/\n  \u23d0 \ud83d\udcc2 api/\n  \u23d0 \ud83d\udcc2 node_modules/\n  \u23d0 \ud83d\udcc2 dist/\n  \u23d0 \ud83d\udcc2 src/\n  \u23d0  \u23d0 contentScript.ts\n  \u23d0  \u23d0 manifest.json\n  \u23d0  \u23d0 index.ts\n  \u23d0 plugin.config.json\n  \u23d0 ...\n")),(0,r.kt)("h3",{id:"register-the-content-script"},"Register the content script"),(0,r.kt)("p",null,"Open ",(0,r.kt)("inlineCode",{parentName:"p"},"src/index.ts"),". It should look similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import joplin from 'api';\n\njoplin.plugins.register({\n    onStart: async function() {\n        // eslint-disable-next-line no-console\n        console.info('Hello world. Test plugin started!');\n    },\n});\n")),(0,r.kt)("p",null,"Next, use ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/api/references/plugin_api/classes/joplinplugins.html#register"},"joplin.contentScripts.register")," to add the content script to Joplin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"import joplin from 'api';\n+import { ContentScriptType } from 'api/types';\n\njoplin.plugins.register({\n    onStart: async function() {\n-       // eslint-disable-next-line no-console\n-       console.info('Hello world. Test plugin started!');\n+       const contentScriptId = 'some-content-script-id';\n+       joplin.contentScripts.register(\n+           ContentScriptType.CodeMirrorPlugin,\n+           contentScriptId,\n+           './contentScript.js',\n+       );\n    },\n});\n")),(0,r.kt)("p",null,"When Joplin starts, this causes ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScript.js")," (which is built from ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScript.ts"),") to be loaded as a CodeMirror plugin."),(0,r.kt)("h3",{id:"register-codemirror-extensions-from-the-content-script"},"Register CodeMirror extensions from the content script"),(0,r.kt)("p",null,"Next, open ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScript.ts")," and add the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// 1. Import a CodeMirror extension\nimport { lineNumbers } from '@codemirror/view';\n\nexport default (_context: { contentScriptId: string, postMessage: any }) => {\n    return {\n        plugin: (codeMirrorWrapper: any) => {\n            // 2. Adds the built-in CodeMirror 6 extension to the editor\n            codeMirrorWrapper.addExtension(lineNumbers());\n        },\n    };\n};\n")),(0,r.kt)("p",null,"The above script adds ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/docs/ref/#view.lineNumbers"},"the built-in CodeMirror ",(0,r.kt)("inlineCode",{parentName:"a"},"lineNumbers")," extension")," to the editor. It's also possible to pass an array of ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/docs/ref/#state.Extension"},"extension"),"s to ",(0,r.kt)("inlineCode",{parentName:"p"},".addExtension"),"."),(0,r.kt)("p",null,"If you build the plugin with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run dist"),", you might see the following error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"bash$ npm run dist\n...\n\nERROR in /home/builder/Documents/joplin/packages/app-cli/tests/support/plugins/cm6-test/src/contentScript.ts\n2:28-46\n[tsl] ERROR in /home/builder/Documents/joplin/packages/app-cli/tests/support/plugins/cm6-test/src/contentScript.ts(2,29)\n      TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.\n")),(0,r.kt)("p",null,"At present, TypeScript can't find type information for ",(0,r.kt)("inlineCode",{parentName:"p"},"@codemirror/view"),". To fix this, run ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install --save-dev @codemirror/view")," in the plugin's base directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cd path/to/codemirror6-plugin/\n$ npm install --save-dev @codemirror/view\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The default ",(0,r.kt)("inlineCode",{parentName:"p"},"webpack.config.js")," tells Webpack not to bundle several packages, including ",(0,r.kt)("inlineCode",{parentName:"p"},"@codemirror/view"),". As such, the ",(0,r.kt)("inlineCode",{parentName:"p"},"@codemirror/view")," plugin is used ",(0,r.kt)("strong",{parentName:"p"},"only for type information"),"."),(0,r.kt)("p",{parentName:"admonition"},"This is what we want. If ",(0,r.kt)("inlineCode",{parentName:"p"},"@codemirror/view")," is bundled with the plugin, it could conflict with the version of ",(0,r.kt)("inlineCode",{parentName:"p"},"@codemirror/view")," used by Joplin. In general, CodeMirror packages can break if multiple copies of the same package try to use the same editor. This is also why a ",(0,r.kt)("a",{parentName:"p",href:"#update-the-plugin-build-script"},"newer version of ",(0,r.kt)("inlineCode",{parentName:"a"},"webpack.config.js"))," is required to build the plugin.")),(0,r.kt)("h3",{id:"try-it"},"Try it!"),(0,r.kt)("p",null,"We now have an extension that adds line numbers to Joplin's markdown editor."),(0,r.kt)("p",null,"To try it,"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open Joplin."),(0,r.kt)("li",{parentName:"ol"},'Open "Options", then "Plugins".'),(0,r.kt)("li",{parentName:"ol"},'Click "Show Advanced Settings"'),(0,r.kt)("li",{parentName:"ol"},"Enter the path to the ",(0,r.kt)("inlineCode",{parentName:"li"},"codemirror6-plugin"),' directory into the "Development plugins" box.'),(0,r.kt)("li",{parentName:"ol"},'Open the "General" tab and make sure "opt in to the editor beta" is checked.'),(0,r.kt)("li",{parentName:"ol"},"Restart Joplin.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Make sure Joplin closes completely before opening it again. On Windows/Linux, this can be done by closing Joplin with ",(0,r.kt)("inlineCode",{parentName:"li"},"File")," ",">"," ",(0,r.kt)("inlineCode",{parentName:"li"},"Quit"),".")))),(0,r.kt)("p",null,"Your editor should now have line numbers!"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If the plugin fails to load, you might see an error similar to the following in Joplin's development tools (",(0,r.kt)("inlineCode",{parentName:"p"},"Help")," ",">"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggle development tools"),"):"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"Error: Unrecognized extension value in extension set (function(t={}){return[kn.of(t),gn(),An]}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.\n")),(0,r.kt)("p",{parentName:"admonition"},"If you do, be sure to follow the ",(0,r.kt)("a",{parentName:"p",href:"#update-the-plugin-build-script"},'steps in the "Update the Plugin Build Script"')," section. If that section doesn't help, change"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { lineNumbers } from '@codemirror/view';\n")),(0,r.kt)("p",{parentName:"admonition"},"to"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import joplin from \"api\";\nconst { lineNumbers } = joplin.require('@codemirror/view');\n"))),(0,r.kt)("h2",{id:"connect-to-the-main-script"},"Connect to the main script"),(0,r.kt)("p",null,"Next, we'll see how to communicate between the plugin's main script and the editor. We'll do this using ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/api/references/plugin_api/classes/joplincontentscripts.html#onmessage"},(0,r.kt)("inlineCode",{parentName:"a"},"joplin.contentScripts.onMessage"))," and ",(0,r.kt)("inlineCode",{parentName:"p"},"context.postMessage"),"."),(0,r.kt)("h3",{id:"register-a-setting"},"Register a setting"),(0,r.kt)("p",null,"Let's start by registering a setting."),(0,r.kt)("p",null,"Open ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," and, near the top of the file, create a new function, ",(0,r.kt)("inlineCode",{parentName:"p"},"registerSettings.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import joplin from 'api';\nimport { ContentScriptType } from 'api/types';\n\n// Add this:\nconst registerSettings = async () => {\n    const sectionName = 'example-cm6-plugin';\n    await joplin.settings.registerSection(sectionName, {\n        label: 'CodeMirror 6 demo plugin',\n        description: 'Settings for the CodeMirror 6 example plugin.',\n        icon: 'fas fa-edit',\n    });\n\n    // TODO:\n};\n\n// ...\n")),(0,r.kt)("p",null,"The call to ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/api/references/plugin_api/classes/joplinsettings.html#registersection"},(0,r.kt)("inlineCode",{parentName:"a"},"joplin.settings.registerSection"))," creates a new section in Joplin's settings. This is where we'll put new settings."),(0,r.kt)("p",null,"As before, ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," can be any ",(0,r.kt)("a",{parentName:"p",href:"https://fontawesome.com/v5/search?q=edit&o=r&m=free"},"FontAwesome 5 Free")," icon name. The ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," property is an optional extended description to be shown at the top of our settings page."),(0,r.kt)("p",null,"Next, let's register a setting."),(0,r.kt)("p",null,"Add a new ",(0,r.kt)("inlineCode",{parentName:"p"},"highlightLineSettingId")," constant to the top of ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts"),". Then, register a setting with ",(0,r.kt)("inlineCode",{parentName:"p"},"highlightLineSettingId")," as its ID using ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/api/references/plugin_api/classes/joplinsettings.html#registersetting"},(0,r.kt)("inlineCode",{parentName:"a"},"joplin.settings.registerSettings")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import joplin from 'api';\n// Add an import for SettingItemType:\nimport { ContentScriptType, SettingItemType } from 'api/types';\n\n// Add this:\nconst highlightLineSettingId = 'highlight-active-line';\n\nconst registerSettings = async () => {\n    const sectionName = 'example-cm6-plugin';\n    await joplin.settings.registerSection(sectionName, {\n        label: 'CodeMirror 6 demo plugin',\n        description: 'Settings for the CodeMirror 6 example plugin.',\n        iconName: 'fas fa-edit',\n    });\n\n    // Add this:\n    await joplin.settings.registerSettings({\n        [highlightLineSettingId]: {\n            section: sectionName,\n            value: true, // Default value\n            public: true, // Show in the settings screen\n            type: SettingItemType.Bool,\n            label: 'Highlight active line',\n        },\n    });\n};\n\n// ...\n")),(0,r.kt)("p",null,"Finally, add a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"registerSettings")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"onStart"),"."),(0,r.kt)("p",null,"We can get and set settings in the plugin's main script (",(0,r.kt)("inlineCode",{parentName:"p"},"src/index.ts"),"), but not directly in the plugin's content script."),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("code",null,"index.ts")," should now look like this."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"index.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import joplin from 'api';\nimport { ContentScriptType, SettingItemType } from 'api/types';\nconst highlightLineSettingId = 'highlight-active-line';\n\nconst registerSettings = async () => {\n    const sectionName = 'example-cm6-plugin';\n    await joplin.settings.registerSection(sectionName, {\n        label: 'CodeMirror 6 demo plugin',\n        description: 'Settings for the CodeMirror 6 example plugin.',\n        iconName: 'fas fa-edit',\n    });\n\n    await joplin.settings.registerSettings({\n        [highlightLineSettingId]: {\n            section: sectionName,\n            value: true, // Default value\n            public: true, // Show in the settings screen\n            type: SettingItemType.Bool,\n            label: 'Highlight active line',\n        },\n    });\n};\n\njoplin.plugins.register({\n    onStart: async function() {\n        await registerSettings();\n\n        const contentScriptId = 'some-content-script-id';\n        await joplin.contentScripts.register(\n            ContentScriptType.CodeMirrorPlugin,\n            contentScriptId,\n            './contentScript.js',\n        );\n    },\n});\n"))),(0,r.kt)("h3",{id:"create-an-onmessage-listener-that-returns-the-setting-value"},"Create an ",(0,r.kt)("inlineCode",{parentName:"h3"},"onMessage")," listener that returns the setting value"),(0,r.kt)("p",null,"Create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"registerMessageListener")," function, just above ",(0,r.kt)("inlineCode",{parentName:"p"},"joplin.plugins.register({"),". In this function, register an ",(0,r.kt)("inlineCode",{parentName:"p"},"onMessage")," listener with ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/api/references/plugin_api/classes/joplincontentscripts.html#onmessage"},(0,r.kt)("inlineCode",{parentName:"a"},"joplin.contentScripts.onMessage")),". We'll listen for the ",(0,r.kt)("inlineCode",{parentName:"p"},"getSettings")," message and return an object with the plugin's current settings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// ... in index.ts ...\n// ...hidden...\n\n// Add this:\nconst registerMessageListener = async (contentScriptId: string) => {\n    await joplin.contentScripts.onMessage(\n        contentScriptId,\n        \n        // Sending messages with `context.postMessage`\n        // from the content script with `contentScriptId`\n        // calls this onMessage listener:\n        async (message: any) => {\n            if (message === 'getSettings') {\n                const settingValue = await joplin.settings.value(highlightLineSettingId);\n                return {\n                    highlightActiveLine: settingValue,\n                };\n            }\n        },\n    );\n};\n\njoplin.plugins.register({\n    onStart: async function() {\n        await registerSettings();\n\n        // Add this:\n        const contentScriptId = 'some-content-script-id';\n        await registerMessageListener(contentScriptId);\n        \n        await joplin.contentScripts.register(\n            ContentScriptType.CodeMirrorPlugin,\n            contentScriptId,\n            './contentScript.js',\n        );\n    }\n});\n")),(0,r.kt)("h3",{id:"get-the-setting-from-the-content-script"},"Get the setting from the content script"),(0,r.kt)("p",null,"Open ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScript.ts")," and update it with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { lineNumbers, highlightActiveLine } from '@codemirror/view';\n\n// We're now using `context`: Rename it from `_context`\n// to `context`.\nexport default (context: { contentScriptId: string, postMessage: any }) => {\n    return {\n        // An `async` was also added so that we can `await` the result of\n        // `context.postMessage`:\n        plugin: async (codeMirrorWrapper: any) => {\n            codeMirrorWrapper.addExtension(lineNumbers());\n\n            // Add this:\n            // Get settings from the main script with postMessage:\n            const settings = await context.postMessage('getSettings');\n            if (settings.highlightActiveLine) {\n                codeMirrorWrapper.addExtension(highlightActiveLine());\n            }\n        },\n    };\n};\n")),(0,r.kt)("p",null,"Above, we get settings from ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"context.postMessage('getSettings')"),". This calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"onMessage")," listener that was registered earlier. Its return value is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"settings")," variable."),(0,r.kt)("p",null,"Note that ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/docs/ref/#view.highlightActiveLine"},(0,r.kt)("inlineCode",{parentName:"a"},"highlightActiveLine"))," is another built-in CodeMirror extension. It adds the ",(0,r.kt)("inlineCode",{parentName:"p"},"cm-activeLine")," class to all lines that have a cursor on them."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Alternative approach to getting settings: Registering an editor command"),(0,r.kt)("p",null,"Above, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"postMessage")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onMessage")," to access settings."),(0,r.kt)("p",null,"An alternative way to do this would be to register an editor command with code similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// You may need to add @codemirror/state to package.json\nimport { Compartment } from '@codemirror/state';\n\n// ...\n\n    plugin: async (codeMirrorWrapper: any) => {\n        // See https://codemirror.net/examples/config/#compartments\n        const highlightExtension = new Compartment();\n        codeMirrorWrapper.addExtension(highlightExtension.of([]));\n\n        codeMirrorWrapper.defineExtension('myExtension__setHighlightActiveLine', (highlighted: boolean) => {\n            const extension = highlighted ? [ highlightActiveLine() ] : [ ];\n            codeMirrorWrapper.editor.dispatch({\n                effects: [ highlightExtension.reconfigure(extension) ],\n            });\n        });\n    },\n")),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts"),", we could then call the following function ",(0,r.kt)("a",{parentName:"p",href:"https://joplinapp.org/api/references/plugin_api/classes/joplinsettings.html#onchange"},"when the plugin's settings change")," and after the content script loads:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const updateContentScriptSettings = async () => {\n    await joplin.commands.execute('editor.execCommand', {\n        name: 'myExtension__setHighlightActiveLine',\n        args: [ await joplin.settings.value(highlightLineSettingId) ],\n    });\n};\n"))),(0,r.kt)("h3",{id:"style-the-active-line"},"Style the active line"),(0,r.kt)("p",null,"If you run the plugin, you might notice that the active line has a blue background. Let's customise it with CSS!"),(0,r.kt)("p",null,"There are two different ways of doing this: With a ",(0,r.kt)("inlineCode",{parentName:"p"},".css")," file and with a ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/examples/styling/"},"CodeMirror theme"),". In this tutorial, we'll use a ",(0,r.kt)("inlineCode",{parentName:"p"},".css")," file."),(0,r.kt)("p",null,"Create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"style.css")," file within the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory. Set its content to"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},".cm-editor .cm-line.cm-activeLine {\n    /* See https://joplinapp.org/help/api/references/plugin_theming\n       for more information about styling with plugins */\n    color: var(--joplin-color);\n    background-color: rgba(200, 200, 0, 0.4);\n}\n")),(0,r.kt)("p",null,"Next, load the CSS file from the CodeMirror content script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { lineNumbers, highlightActiveLine } from '@codemirror/view';\n\nexport default (context: { contentScriptId: string, postMessage: any }) => {\n    return {\n        plugin: async (codeMirrorWrapper: any) => {\n            // ...hidden\n        },\n        assets: () => {\n            return [ { name: './style.css' } ];\n        },\n    };\n};\n")),(0,r.kt)("p",null,'The active line should now have a light-yellow background, but only when the "highlight active line" setting is enabled.'),(0,r.kt)("h2",{id:"codemirror-5-compatibility"},"CodeMirror 5 compatibility"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"As of Joplin v2.14 we recommend that you create CodeMirror 6-based plugins. If you still need to support older versions of Joplin, you can target both CodeMirror 5 and CodeMirror 6. Follow the tutorial below for information on how to do this.")),(0,r.kt)("p",null,"Joplin's legacy markdown editor uses ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/5/"},"CodeMirror 5"),". The beta editor uses CodeMirror 6."),(0,r.kt)("p",null,"Unfortunately, the ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/5/"},"CodeMirror 5 API")," and ",(0,r.kt)("a",{parentName:"p",href:"https://codemirror.net/"},"CodeMirror 6 API"),"s are very different. As such, you'll likely need two different content scripts \u2014 one for CodeMirror 5 and one for CodeMirror 6. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/roman-r-m/joplin-plugin-quick-links/pull/15/files#diff-a19ae4175adf4e5173549901c8535f2a45278f8a907da485899660c08c1c520b"},"This pull request")," provides an example of how CodeMirror 6 support might be added to an existing plugin."),(0,r.kt)("p",null,"To add CodeMirror 5 compatibility to our CodeMirror 6 plugin, we'll:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create another content script for CodeMirror 5. Use only ",(0,r.kt)("a",{parentName:"li",href:"https://codemirror.net/5/"},"CodeMirror 5 APIs"),"."),(0,r.kt)("li",{parentName:"ol"},"Within the ",(0,r.kt)("inlineCode",{parentName:"li"},"plugin")," function, check whether ",(0,r.kt)("inlineCode",{parentName:"li"},"codeMirrorWrapper")," is actually a CodeMirror 5 editor. This can be done by checking whether ",(0,r.kt)("inlineCode",{parentName:"li"},"codeMirrorWrapper.cm6")," is defined. (If it is, it's a reference to a CodeMirror 6 ",(0,r.kt)("inlineCode",{parentName:"li"},"EditorView"),")."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"codeMirrorWrapper.cm6")," is defined, only load the CodeMirror 5 content script. Otherwise, only load the CodeMirror 6 content script.")),(0,r.kt)("h3",{id:"create-a-content-script-for-codemirror-5"},"Create a content script for CodeMirror 5"),(0,r.kt)("p",null,"For organisational purposes, make a new folder, ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contentScripts"),". Next, move the existing ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScript.ts")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contentScripts/codeMirror6.ts")," and create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScripts/codeMirror5.ts")," file."),(0,r.kt)("p",null,"You should now have the following folder structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\ud83d\udcc2 codemirror6-plugin/\n  \u23d0 \ud83d\udcc2 publish/\n  \u23d0 \ud83d\udcc2 api/\n  \u23d0 \ud83d\udcc2 node_modules/\n  \u23d0 \ud83d\udcc2 dist/\n  \u23d0 \ud83d\udcc2 src/\n  \u23d0   \u23d0 \ud83d\udcc2 contentScripts/\n  \u23d0   \u23d0  \u23d0  codeMirror6.ts\n  \u23d0   \u23d0  \u23d0  codeMirror5.ts\n  \u23d0   \u23d0 manifest.json\n  \u23d0   \u23d0 index.ts\n  \u23d0 plugin.config.json\n  \u23d0 ...\n")),(0,r.kt)("p",null,"For now, let ",(0,r.kt)("inlineCode",{parentName:"p"},"src/contentScripts/codeMirror5.ts"),"'s content be the same as the original CodeMirror 6 content script."),(0,r.kt)("p",null,"Next, update ",(0,r.kt)("inlineCode",{parentName:"p"},"plugin.config.json")," so that both content scripts are compiled by Webpack:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "extraScripts": [\n        "contentScripts/codeMirror6.ts",\n        "contentScripts/codeMirror5.ts"\n    ]\n}\n')),(0,r.kt)("h3",{id:"register-the-content-script-1"},"Register the content script"),(0,r.kt)("p",null,"Update ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts")," so that ",(0,r.kt)("strong",{parentName:"p"},"both")," the CodeMirror 5 and CodeMirror 6 content scripts are registered:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\n\n// Add this\nconst registerCodeMirrorContentScript = async (contentScriptName: string) => {\n    const id = contentScriptName;\n    await registerMessageListener(id);\n    await joplin.contentScripts.register(\n        ContentScriptType.CodeMirrorPlugin,\n        id,\n        `./contentScripts/${id}.js`,\n    );\n};\n\njoplin.plugins.register({\n    onStart: async function() {\n        await registerSettings();\n\n        // Add this:\n        await registerCodeMirrorContentScript('codeMirror6');\n        await registerCodeMirrorContentScript('codeMirror5');\n\n        // DELETE this:\n        //await joplin.contentScripts.register(\n        //  ContentScriptType.CodeMirrorPlugin,\n        //  contentScriptId,\n        //  './contentScripts/contentScript.js',\n        //);\n    }\n});\n")),(0,r.kt)("h3",{id:"update-the-codemirror-5-content-script"},"Update the CodeMirror 5 content script"),(0,r.kt)("p",null,"Replace the CodeMirror 5 content script's content with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Don't import CodeMirror 6 packages here -- doing so won't work in the CM5 editor.\n\nexport default (context: { contentScriptId: string, postMessage: any }) => {\n    return {\n        plugin: async (codeMirror: any) => {\n            // Exit if not a CodeMirror 5 editor.\n            if (codeMirror.cm6) {\n                return;\n            }\n\n            codeMirror.defineOption('enable-highlight-extension', true, async function() {\n                const settings = await context.postMessage('getSettings');\n\n                // At this point, `this` points to the CodeMirror\n                // editor instance\n                this.setOption('styleActiveLine', settings.highlightActiveLine);\n            });\n        },\n\n        // Sets CodeMirror 5 default options.\n        codeMirrorOptions: {\n            'lineNumbers': true,\n            'enable-highlight-extension': true,\n        },\n\n        // Additional CodeMirror scripts. Has no effect in CodeMirror 6.\n        // See https://codemirror.net/5/doc/manual.html#addon_active-line\n        codeMirrorResources: [ 'addon/selection/active-line.js' ],\n\n        assets: () => {\n            return [ { name: './style.css' } ];\n        },\n    };\n};\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Although Joplin does provide a limited CodeMirror 5 compatibility layer in the CodeMirror 6 editor, in the future, ",(0,r.kt)("strong",{parentName:"p"},"new plugins will be unable to use this compatibility layer"),".")),(0,r.kt)("h3",{id:"make-the-codemirror-6-content-script-only-load-in-codemirror-6"},"Make the CodeMirror 6 content script only load in CodeMirror 6"),(0,r.kt)("p",null,"At the beginning of ",(0,r.kt)("inlineCode",{parentName:"p"},"contentScripts/codeMirror6.ts"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"plugin")," function, add:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { lineNumbers, highlightActiveLine } from '@codemirror/view';\n\nexport default (context: { contentScriptId: string, postMessage: any }) => {\n    return {\n        plugin: async (codeMirrorWrapper: any) => {\n            // Exit if not a CodeMirror 6 editor.\n            if (!codeMirrorWrapper.cm6) return;\n\n            codeMirrorWrapper.addExtension(lineNumbers());\n            // ...\n        },\n        assets: () => {\n            // ...\n        },\n    };\n};\n")),(0,r.kt)("h3",{id:"summary"},"Summary"),(0,r.kt)("p",null,"To support both CodeMirror 5 and CodeMirror 6, we register two content scripts. One will fail to load in CodeMirror 5 and the other we disable in CodeMirror 6."),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/laurent22/joplin/tree/dev/packages/app-cli/tests/support/plugins/codemirror5-and-codemirror6/"},"The final version of the plugin can be found on GitHub")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codemirror.net/5/"},"CodeMirror 5 API documentation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codemirror.net/"},"CodeMirror 6 API documentation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/laurent22/joplin/blob/dev/packages/app-cli/tests/support/plugins/codemirror_content_script/src/"},"The CodeMirror 5 example plugin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/laurent22/joplin/blob/dev/packages/app-cli/tests/support/plugins/codemirror6/src/contentScript.ts"},"The CodeMirror 6 example plugin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://joplinapp.org/api/references/plugin_api/enums/contentscripttype.html"},"Documentation for the different Joplin content script types"))))}u.isMDXComponent=!0}}]);